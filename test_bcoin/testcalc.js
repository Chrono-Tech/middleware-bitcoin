const _ = require('lodash'),
  Network = require('bcoin/lib/protocol/network'),
  TX = require('bcoin/lib/primitives/tx'),
  Promise = require('bluebird'),
  fetchUTXOService = require('../core/rest/utils/fetchUTXOService');

let init = async () => {

  let txHex = '010000000e97e17e55a1c25b245cd9a2a3f3460b236215ecbb934411fa6f3f6f6d7c0b8392000000006b4830450221009e937a26aa9e20c5fab96398f08c5209484a37c4db5a15f69aa17d717fcf77d80220031e0d68563e2031c17f6bb6c7ce4b1045211b00fe4f7a2bad2a3b60fe9dc56b012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffff13115f629e4bac12b31a8748efb194dd3719dd0e12aaf17ced8b7352a9250834000000006a47304402206c7d62bff4904215fa5990f83b0de6108bcd224c24eb4ea9de77001bc2cabc8a02207b01d8c79e884f772b517cbffa2f097fbccad17cd17c599259af0a985961c353012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffff40c29057a8642c8cdd2a473b4ccfe4c2a9b731abc9a5ef8b196127275a024006000000006a47304402203962d180f5052e61210fb724594a69aafb01f210f5e73c1b8ef0bc84b54c9155022049db743426d84a1b3f4bde0d31d7a325498b19d100df087192585e00f2b17f35012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffff597946188651f4a621e098e878bd036dddb73828c68cd70da1bfe1c51100f567000000006a473044022023bf065ed188e6d127d421cb50b1d48c0581cfa31ddcea86a66b362664813e2502201a866a2f2b0c4568acd000a2d033a751366377088d99377d3d7d661a77459014012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffff6e28b91699a2a40c2dabfb20fa2a4984f4ebed6b7e11c302b4cc34ced8e4878e000000006b48304502210087d1c878a80262763f1165f77788ed7c7b3466a7942028edd945f8bcf173ab6d02202f99d3b7e6c995c347cf6084425805081e48847c5c11df9c2f7c885eb74398f4012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffff73145ac22318d4be6b2eed5efc473129cab8bcd9b2625c6483efa182a72bad70000000006b483045022100bc7c30fe149450b031e2f854310e38634a224f682635ec2fc646fe0b7775328002204e78862be8bac944b1929f3b0674d34d5ee9c83cd18cc01979ee70791aef3274012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffff73418859deb878d6e25be5ed1693d1512a3bfbb9690fa9b863d8840f0cfb8ba4000000006b483045022100b9911745bf05889d83dbc6f40ea9127a6c787ce4272e150572dc290ba3df570502205b0cd470718fa9e86828c0c7d4944a14eeb1e5df6a4618f79936ad9ff08c2717012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffff7a8add110219902af472a3ce88f4704e678ef954b885959f65c3c4994c256da1000000006a473044022062b886d6c68bfa6d5d1a0e77e44d56c26006dbd6ddb180ad6188c39d3e79e4a602202ef11c34ea92bd2e5162085b7b4cbc32a52013223fb77dd08a42e4409b795c9c012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffff7d3e8a576b383a20564a67168c8d3a84616acac7129ca7998ae2cb0d53bc268e000000006a47304402204007f27ca2d56318efc7eb26da733ff8f7400b10d2af527ad3d5c8ad002675b80220375b643187d73c0ea08d1239cab32499727040ee8a812f103ef7649e82a30ca8012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffff818b9964c4fad79b4bb6aa42dc96f4079af3f3800545c462654981ea274c95f6000000006b483045022100f7639c3fd3388d0305b5eddad101109b7ddbac8a578c38d18fd6b0e15e4c8386022037ff26ce880d402156138662fdfe908d963c398b383acee554e4749cd44a9d28012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffff231af6c642bfa4bb3b25e6011b76bafddea2861f14b402b2b957e4c70bf00689000000006b4830450221008c8504294398b15db0ff8dbb867e049edbec2705b413842ffec4871ddc232e1a02200c0e244159f925e00687879e217b58025a83c26af43680dd9444d847b9a482c9012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffffa45d721a985fdf407f555209a3d1da2e75a670b2b5e66dd0f85c7e76c3b41cb1000000006a47304402204ca52f8b6ffbb6566b06c1f3a9496648c41bf435bbffed2390ae56a319f7cf11022047726b57f4708e686c2b79b03f63140f01f0c275a56e19c88a7f45f116052dbb012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffffb3bfd6092661c2397093d1b278241accc5dbb459fbc18a77ec02363e2f85fa6b000000006a47304402202b5faa97b82e27424116346ad8dde9d98d10299784e8fef5d9d5b53c7c6c74fc0220284a63dd061dc5f2d97db798736896a2878901918dc5d4bc577007fc58ddc2a6012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffffb72e62d7b0a0f2b2e0372e7b0b379f197f6ab4174994258a172f8280731cbffb000000006b483045022100cf1249c25c848cb6ea6b3a51c2eda9a1554db321b2fb77a94129f8b272060e7002202f882f05353a32cf849dd1bb2c118e9f721bda1d2cd2878f0f4a2295e5412a9f012102b1f749611de826575480c359f17553817413956de2966e33bb50d0ef25e0cd25ffffffff0300634a8a040000001976a914bf6083a6792c238af37111a68fe85d73a6399d2688ac80f7b9590b0000001976a914a629df1cc6858fdfd2a9e6271afec9a59b7a5f1988aca48b4e68000000001976a914bf300e92ec398dcfb35492de0333089ba00c3db688ac00000000';

  let decodedTx = TX.fromRaw(txHex, 'hex');
  let network = Network.get('regtest');
  let tx = decodedTx.getJSON(network);

  let coinInput = await Promise.mapSeries(tx.inputs, input => fetchUTXOService(input.address));

  coinInput = _.flattenDeep(coinInput);
  //input 85 -> output 25 = total is input - output, or if there is no output then input - input
  //input 85 -> output 25 amount: -50, or if no output - amount: -85

  let inAddresses = _.chain(tx.inputs)
    .map(input => input.address)
    .uniq()
    .map(address => {
      let inValue = _.chain(coinInput)
        .filter({address: address})
        .map(i => _.get(i, 'satoshis', 0))
        .sum()
        .value();

      let outValue = _.chain(tx.outputs)
        .filter({address: address})
        .map(out => _.get(out, 'value', 0))
        .sum()
        .value();

      return {
        address: address,
        amount: outValue - inValue
      };
    })
    .value();

  let outAddresses = _.chain(tx.outputs)
    .reject(output => _.find(inAddresses, {address: output.address}))
    .map(output => ({address: output.address, amount: output.value}))
    .groupBy('address')
    .map((value, key) => ({
        address: key,
        amount: _.chain(value)
          .map(i => i.amount)
          .sum()
          .value()
      })
    )
    .value();

  //console.log(inAddresses);

  let balances = _.union(inAddresses, outAddresses);

  console.log(balances);

};

module.exports = init();